#include <stdio.h>
#include "driver/gpio.h"
#include "esp_timer.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/ledc.h"
#include "int_i2c.h"


//DEIXEI AS MESMAS GPIOS QUE USEI NOS DIAGRAMAS (BLOCO E ESQUEMÁTICO)
#define LED0 40
#define LED1 45
#define LED2 48
#define LED3 47
#define BOTAO_INCREMENTO 16
#define BOTAO_DECREMENTO 10
#define DEBOUNCE_US 150000
#define LED_PWM_GPIO 42
#define LED_PWM_CHANNEL LEDC_CHANNEL_0
#define LED_PWM_TIMER   LEDC_TIMER_0
#define I2C_SDA 12
#define I2C_SCL 13

bool precisa_atualizar_lcd = false;
int valor_pendente_lcd = 0;


lcd_i2c_handle_t lcd = {
    .address = 0x27,        
    .num = I2C_NUM_0,
    .backlight = 1,
    .size = DISPLAY_16X02
};

int valor = 0;
int passo = 1;
int ultCliqueA = 0;
int ultCliqueB = 0;

void atualizar_display(int valor) {
    lcd_i2c_write(&lcd, 0, CLEAR_DISPLAY);
    lcd_i2c_cursor_set(&lcd, 0, 0);
    lcd_i2c_print(&lcd, "Hex: 0x%X", valor);
    lcd_i2c_cursor_set(&lcd, 0, 1);
    lcd_i2c_print(&lcd, "Dec: %d", valor);
}

void mostrar_nos_leds(int n) {
    gpio_set_level(LED0, n & 0x01);
    gpio_set_level(LED1, (n >> 1) & 0x01);
    gpio_set_level(LED2, (n >> 2) & 0x01);
    gpio_set_level(LED3, (n >> 3) & 0x01);

    // configuro o brilho
    int duty = (n & 0x0F) * 17; 
    ledc_set_duty(LEDC_LOW_SPEED_MODE, LED_PWM_CHANNEL, duty);
    ledc_update_duty(LEDC_LOW_SPEED_MODE, LED_PWM_CHANNEL);

    valor_pendente_lcd = n;
    precisa_atualizar_lcd = true;
}


void botao_incremento(void* arg) {
    int agora = esp_timer_get_time();
    if (agora - ultCliqueA > DEBOUNCE_US) {
        valor = (valor + passo) & 0x0F;
        mostrar_nos_leds(valor);
        ultCliqueA = agora;
    }
}

void botao_decremento(void* arg) {
    int agora = esp_timer_get_time();
    if (agora - ultCliqueB > DEBOUNCE_US) {
        valor = (valor - 1) & 0x0F;  
        mostrar_nos_leds(valor);
        ultCliqueB = agora;
    }
}

void inicializar_pwm_led() {
    ledc_timer_config_t pwm_timer = {
        .duty_resolution = LEDC_TIMER_8_BIT,
        .freq_hz = 5000,
        .speed_mode = LEDC_LOW_SPEED_MODE,
        .timer_num = LED_PWM_TIMER
    };
    ledc_timer_config(&pwm_timer);

    ledc_channel_config_t pwm_channel = {
        .channel    = LED_PWM_CHANNEL,
        .duty       = 0,
        .gpio_num   = LED_PWM_GPIO,
        .speed_mode = LEDC_LOW_SPEED_MODE,
        .hpoint     = 0,
        .timer_sel  = LED_PWM_TIMER
    };
    ledc_channel_config(&pwm_channel);
}


void app_main(void) {
    
    i2c_config_t conf_i2c = {
      .mode = I2C_MODE_MASTER,
      .sda_io_num = I2C_SDA,
      .scl_io_num = I2C_SCL,
      .sda_pullup_en = GPIO_PULLUP_ENABLE,
      .scl_pullup_en = GPIO_PULLUP_ENABLE,
      .master.clk_speed = 100000
    };
    i2c_param_config(I2C_NUM_0, &conf_i2c);
    i2c_driver_install(I2C_NUM_0, conf_i2c.mode, 0, 0, 0);

    lcd_i2c_init(&lcd);

    gpio_config_t cfg_leds = {
        .pin_bit_mask = (1ULL << LED0) | (1ULL << LED1) |
                        (1ULL << LED2) | (1ULL << LED3),
        .mode = GPIO_MODE_OUTPUT
    };
    gpio_config(&cfg_leds);

    gpio_config_t cfg_botoes = {
        .pin_bit_mask = (1ULL << BOTAO_INCREMENTO) | (1ULL << BOTAO_DECREMENTO),
        .mode = GPIO_MODE_INPUT,
        .pull_up_en = 1,
        .intr_type = GPIO_INTR_NEGEDGE
    };
    gpio_config(&cfg_botoes);

    inicializar_pwm_led();

    gpio_install_isr_service(0);
    gpio_isr_handler_add(BOTAO_INCREMENTO, botao_incremento, NULL);
    gpio_isr_handler_add(BOTAO_DECREMENTO, botao_decremento, NULL);

    mostrar_nos_leds(valor);

    while (1) {
      if (precisa_atualizar_lcd) {
        atualizar_display(valor_pendente_lcd);
        precisa_atualizar_lcd = false;
      }
      vTaskDelay(pdMS_TO_TICKS(50));  
    }
}
