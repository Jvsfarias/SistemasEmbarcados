#include <stdio.h>
#include <math.h>
#include "driver/gpio.h"
#include "driver/adc.h"
#include "esp_timer.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/ledc.h"
#include "int_i2c.h"


//ANTES DE TESTAR, LEIA POR FAVOR AS OBSERVAÇÕES ACIMA DO DIAGRAMA
#define LED0 40
#define LED1 45
#define LED2 48
#define LED3 47
#define BOTAO_INCREMENTO 16
#define BOTAO_DECREMENTO 10
#define BUZZER_GPIO 42
#define I2C_SDA 12
#define I2C_SCL 13
#define DEBOUNCE_US 150000

#define SENSOR_GPIO     4
#define SENSOR_CHANNEL  ADC1_CHANNEL_3  // GPIO 4
#define BETA            3950.0
#define ADC_MAX         4095.0
#define T0_KELVIN       298.15  // 25 °C em Kelvin


int temperatura_alarme = 25;
int temperatura_atual = 20;

lcd_i2c_handle_t lcd = {
    .address = 0x27,
    .num = I2C_NUM_0,
    .backlight = 1,
    .size = DISPLAY_16X02
};


void inicializar_pwm_buzzer() {
    ledc_timer_config_t pwm_timer = {
        .duty_resolution = LEDC_TIMER_8_BIT,
        .freq_hz = 2000,
        .speed_mode = LEDC_LOW_SPEED_MODE,
        .timer_num = LEDC_TIMER_0
    };
    ledc_timer_config(&pwm_timer);

    ledc_channel_config_t pwm_channel = {
        .channel    = LEDC_CHANNEL_0,
        .duty       = 0,
        .gpio_num   = BUZZER_GPIO,
        .speed_mode = LEDC_LOW_SPEED_MODE,
        .hpoint     = 0,
        .timer_sel  = LEDC_TIMER_0
    };
    ledc_channel_config(&pwm_channel);
}

void ligar_buzzer() {
    ledc_set_duty(LEDC_LOW_SPEED_MODE, LEDC_CHANNEL_0, 128);
    ledc_update_duty(LEDC_LOW_SPEED_MODE, LEDC_CHANNEL_0);
}

void desligar_buzzer() {
    ledc_set_duty(LEDC_LOW_SPEED_MODE, LEDC_CHANNEL_0, 0);
    ledc_update_duty(LEDC_LOW_SPEED_MODE, LEDC_CHANNEL_0);
}

float ler_temperatura_celsius() {
    int raw = adc1_get_raw(SENSOR_CHANNEL);
    float resistencia = 10000.0 / ((ADC_MAX / (float)raw) - 1.0); 
    float temperatura_k = 1.0 / (log(resistencia / 10000.0) / BETA + (1.0 / T0_KELVIN));
    return temperatura_k - 273.15;
}

void atualizar_display() {
    lcd_i2c_write(&lcd, 0, CLEAR_DISPLAY);
    lcd_i2c_cursor_set(&lcd, 0, 0);
    lcd_i2c_print(&lcd, "Alarme: %d C", temperatura_alarme);
    lcd_i2c_cursor_set(&lcd, 0, 1);
    lcd_i2c_print(&lcd, "Temp:   %d C", temperatura_atual);
}

void atualizar_leds(int temp, int alarme, bool alarme_ativo) {
    bool pisca = alarme_ativo && (esp_timer_get_time() / 500000) % 2;

    gpio_set_level(LED0, alarme_ativo ? pisca : (temp <= alarme - 2));
    gpio_set_level(LED1, alarme_ativo ? pisca : (temp <= alarme - 10));
    gpio_set_level(LED2, alarme_ativo ? pisca : (temp <= alarme - 15));
    gpio_set_level(LED3, alarme_ativo ? pisca : (temp <= alarme - 20));
}

void app_main(void) {
    i2c_config_t conf_i2c = {
        .mode = I2C_MODE_MASTER,
        .sda_io_num = I2C_SDA,
        .scl_io_num = I2C_SCL,
        .sda_pullup_en = GPIO_PULLUP_ENABLE,
        .scl_pullup_en = GPIO_PULLUP_ENABLE,
        .master.clk_speed = 100000
    };
    i2c_param_config(I2C_NUM_0, &conf_i2c);
    i2c_driver_install(I2C_NUM_0, conf_i2c.mode, 0, 0, 0);
    lcd_i2c_init(&lcd);
    vTaskDelay(pdMS_TO_TICKS(100));

    gpio_config_t cfg_leds = {
        .pin_bit_mask = (1ULL << LED0) | (1ULL << LED1) |
                        (1ULL << LED2) | (1ULL << LED3),
        .mode = GPIO_MODE_OUTPUT
    };
    gpio_config(&cfg_leds);

    gpio_config_t cfg_botoes = {
        .pin_bit_mask = (1ULL << BOTAO_INCREMENTO) | (1ULL << BOTAO_DECREMENTO),
        .mode = GPIO_MODE_INPUT,
        .pull_up_en = 1
    };
    gpio_config(&cfg_botoes);

    inicializar_pwm_buzzer();


    adc1_config_width(ADC_WIDTH_BIT_12);
    adc1_config_channel_atten(SENSOR_CHANNEL, ADC_ATTEN_DB_11);


    int tempo_ultimo_inc = 0;
    int tempo_ultimo_dec = 0;
    int estado_antigo_inc = 1;
    int estado_antigo_dec = 1;

    while (1) {
        int agora = esp_timer_get_time();

        int estado_atual_inc = gpio_get_level(BOTAO_INCREMENTO);
        int estado_atual_dec = gpio_get_level(BOTAO_DECREMENTO);

        if (estado_antigo_inc == 1 && estado_atual_inc == 0 && agora - tempo_ultimo_inc > DEBOUNCE_US) {
            temperatura_alarme += 5;
            tempo_ultimo_inc = agora;
        }

        if (estado_antigo_dec == 1 && estado_atual_dec == 0 && agora - tempo_ultimo_dec > DEBOUNCE_US) {
            temperatura_alarme -= 5;
            tempo_ultimo_dec = agora;
        }

        estado_antigo_inc = estado_atual_inc;
        estado_antigo_dec = estado_atual_dec;


        temperatura_atual = (int) ler_temperatura_celsius();


        bool alarme_ativo = temperatura_atual >= temperatura_alarme;
        if (alarme_ativo) ligar_buzzer();
        else desligar_buzzer();

        atualizar_leds(temperatura_atual, temperatura_alarme, alarme_ativo);
        atualizar_display();

        printf("ALARME: %d C | TEMPERATURA: %d C\n", temperatura_alarme, temperatura_atual);

        vTaskDelay(pdMS_TO_TICKS(300));
    }
}
