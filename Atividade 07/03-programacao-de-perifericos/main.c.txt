#include <stdio.h>
#include <math.h>
#include "driver/gpio.h"
#include "driver/adc.h"
#include "driver/ledc.h"
#include "esp_timer.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "int_i2c.h"

#define LED0 40
#define LED1 45
#define LED2 48
#define LED3 47
#define BOTAO_INCREMENTO 16
#define BOTAO_DECREMENTO 10
#define BUZZER_GPIO 42
#define SENSOR_GPIO 4
#define SENSOR_ADC ADC1_CHANNEL_3

#define I2C_SDA 12
#define I2C_SCL 13
#define I2C_NUM I2C_NUM_0

#define MAX_ADC 4095.0
#define BETA 3950.0
#define T0_KELVIN 298.15

#define LCD_ADDRESS 0x27
#define LCD_SIZE DISPLAY_16X02
#define DEBOUNCE_TIME_US 150000

lcd_i2c_handle_t lcd = {
    .address = LCD_ADDRESS,
    .num = I2C_NUM,
    .backlight = 1,
    .size = LCD_SIZE
};

int temp_alarme = 25;
int temp_atual = 20;
int64_t last_press_inc = 0;
int64_t last_press_dec = 0;

volatile bool flag_inc = false;
volatile bool flag_dec = false;

static void IRAM_ATTR isr_botao_inc(void* arg) {
    gpio_intr_disable(BOTAO_INCREMENTO);
    flag_inc = true;
}

static void IRAM_ATTR isr_botao_dec(void* arg) {
    gpio_intr_disable(BOTAO_DECREMENTO);
    flag_dec = true;
}

float ler_temp() {
    int raw = adc1_get_raw(SENSOR_ADC);
    float resistencia = 10000.0 / ((MAX_ADC / (float)raw) - 1.0);
    float celsius = 1.0 / (log(resistencia / 10000.0) / BETA + (1.0 / T0_KELVIN)) - 273.15;
    return celsius;
}

void atualizar_display(int temp, int alarme) {
    char buffer1[9];
    char buffer2[9];

    snprintf(buffer1, sizeof(buffer1), "NTC:%d", temp);
    snprintf(buffer2, sizeof(buffer2), " Al:%d", alarme);

    lcd_i2c_cursor_set(&lcd, 0, 0);  
    lcd_i2c_print(&lcd, buffer1);

    lcd_i2c_cursor_set(&lcd, 0, 8);  
    lcd_i2c_print(&lcd, buffer2);
}

void atualizar_leds(int temp, int alarme, bool alarme_ativo) {
    bool piscar = alarme_ativo && ((esp_timer_get_time() / 500000) % 2);

    gpio_set_level(LED0, alarme_ativo ? piscar : (temp <= alarme - 2));
    gpio_set_level(LED1, alarme_ativo ? piscar : (temp <= alarme - 10));
    gpio_set_level(LED2, alarme_ativo ? piscar : (temp <= alarme - 15));
    gpio_set_level(LED3, alarme_ativo ? piscar : (temp <= alarme - 20));
}

void buzzer_init() {
    ledc_timer_config_t timer = {
        .duty_resolution = LEDC_TIMER_8_BIT,
        .freq_hz = 2000,
        .speed_mode = LEDC_LOW_SPEED_MODE,
        .timer_num = LEDC_TIMER_0
    };
    ledc_timer_config(&timer);

    ledc_channel_config_t channel = {
        .channel = LEDC_CHANNEL_0,
        .duty = 0,
        .gpio_num = BUZZER_GPIO,
        .speed_mode = LEDC_LOW_SPEED_MODE,
        .hpoint = 0,
        .timer_sel = LEDC_TIMER_0
    };
    ledc_channel_config(&channel);
}

void buzzer_on() {
    ledc_set_duty(LEDC_LOW_SPEED_MODE, LEDC_CHANNEL_0, 128);
    ledc_update_duty(LEDC_LOW_SPEED_MODE, LEDC_CHANNEL_0);
}

void buzzer_off() {
    ledc_set_duty(LEDC_LOW_SPEED_MODE, LEDC_CHANNEL_0, 0);
    ledc_update_duty(LEDC_LOW_SPEED_MODE, LEDC_CHANNEL_0);
}

void app_main() {
 
    i2c_config_t i2c_conf = {
        .mode = I2C_MODE_MASTER,
        .sda_io_num = I2C_SDA,
        .scl_io_num = I2C_SCL,
        .sda_pullup_en = GPIO_PULLUP_ENABLE,
        .scl_pullup_en = GPIO_PULLUP_ENABLE,
        .master.clk_speed = 100000
    };
    i2c_param_config(I2C_NUM, &i2c_conf);
    i2c_driver_install(I2C_NUM, i2c_conf.mode, 0, 0, 0);
    lcd_i2c_init(&lcd);

   
    gpio_config_t leds = {
        .pin_bit_mask = (1ULL << LED0) | (1ULL << LED1) |
                        (1ULL << LED2) | (1ULL << LED3),
        .mode = GPIO_MODE_OUTPUT
    };
    gpio_config(&leds);

    
    gpio_config_t botoes = {
        .pin_bit_mask = (1ULL << BOTAO_INCREMENTO) | (1ULL << BOTAO_DECREMENTO),
        .mode = GPIO_MODE_INPUT,
        .pull_up_en = 1,
        .intr_type = GPIO_INTR_NEGEDGE
    };
    gpio_config(&botoes);

    gpio_install_isr_service(0);
    gpio_isr_handler_add(BOTAO_INCREMENTO, isr_botao_inc, NULL);
    gpio_isr_handler_add(BOTAO_DECREMENTO, isr_botao_dec, NULL);

    
    buzzer_init();

 
    adc1_config_width(ADC_WIDTH_BIT_12);
    adc1_config_channel_atten(SENSOR_ADC, ADC_ATTEN_DB_11);

    while (1) {
        int64_t agora = esp_timer_get_time();

        // BOTÃƒO INC
        if (flag_inc) {
            if (agora - last_press_inc > DEBOUNCE_TIME_US) {
                if (gpio_get_level(BOTAO_INCREMENTO) == 1) {
                    temp_alarme += 5;
                    last_press_inc = agora;
                    flag_inc = false;
                    gpio_intr_enable(BOTAO_INCREMENTO);
                }
            }
        }

        
        if (flag_dec) {
            if (agora - last_press_dec > DEBOUNCE_TIME_US) {
                if (gpio_get_level(BOTAO_DECREMENTO) == 1) {
                    temp_alarme -= 5;
                    last_press_dec = agora;
                    flag_dec = false;
                    gpio_intr_enable(BOTAO_DECREMENTO);
                }
            }
        }

        temp_atual = (int)ler_temp();
        bool alarme = temp_atual >= temp_alarme;

        if (alarme) buzzer_on();
        else buzzer_off();

        atualizar_leds(temp_atual, temp_alarme, alarme);
        atualizar_display(temp_atual, temp_alarme);

    

        vTaskDelay(pdMS_TO_TICKS(100));
    }
}
