#include <stdio.h>
#include "driver/gpio.h"
#include "esp_timer.h"

//DEIXEI AS MESMAS GPIOS QUE USEI NOS DIAGRAMAS (BLOCO E ESQUEMÁTICO)
#define LED0 40
#define LED1 45
#define LED2 48
#define LED3 47
#define BOTAO_A 16
#define BOTAO_B 10

#define tempo_debounce 150000 

void atualizar_leds(uint8_t val) {
    gpio_set_level(LED0, val & 0x01);
    gpio_set_level(LED1, (val >> 1) & 0x01);
    gpio_set_level(LED2, (val >> 2) & 0x01);
    gpio_set_level(LED3, (val >> 3) & 0x01);
}

void app_main(void) {
    
    gpio_config_t led_configuracao = {
      .pin_bit_mask = (1ULL << LED0) | (1ULL << LED1) | (1ULL << LED2) | (1ULL << LED3),
      .mode = GPIO_MODE_OUTPUT
    };
    gpio_config(&led_configuracao);


    gpio_config_t botoes_configuraçao = {
      .pin_bit_mask = (1ULL << BOTAO_A) | (1ULL << BOTAO_B),
      .mode = GPIO_MODE_INPUT,
      .pull_up_en = 1
    };
    gpio_config(&botoes_configuraçao);

    int contador = 0;
    int incremento = 1;
    int botaoA_antes = 1;
    int botaoB_antes = 1;
    int ultimoCliqueA = 0;
    int ultimoCliqueB = 0;

    atualizar_leds(contador);

    while (1) {
        int botaoA = gpio_get_level(BOTAO_A);
        int botaoB = gpio_get_level(BOTAO_B);
        int agora = esp_timer_get_time();

        // botao A
        if (botaoA_antes == 1 && botaoA == 0) {
            if ((agora - ultimoCliqueA) > tempo_debounce) {
                contador = (contador + incremento) & 0x0F;  
                atualizar_leds(contador);
                ultimoCliqueA = agora;
            }
        }
        botaoA_antes = botaoA;

        // botao b
        if (botaoB_antes == 1 && botaoB == 0) {
            if ((agora - ultimoCliqueB) > tempo_debounce) {
                incremento = (incremento == 1) ? 2 : 1;
                ultimoCliqueB = agora;
            }
        }
        botaoB_antes = botaoB;
    }
}
